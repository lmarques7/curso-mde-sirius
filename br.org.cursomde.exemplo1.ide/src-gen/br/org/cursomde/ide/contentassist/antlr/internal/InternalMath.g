/*
 * generated by Xtext 2.13.0
 */
grammar InternalMath;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package br.org.cursomde.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package br.org.cursomde.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import br.org.cursomde.services.MathGrammarAccess;

}
@parser::members {
	private MathGrammarAccess grammarAccess;

	public void setGrammarAccess(MathGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleProblema
entryRuleProblema
:
{ before(grammarAccess.getProblemaRule()); }
	 ruleProblema
{ after(grammarAccess.getProblemaRule()); } 
	 EOF 
;

// Rule Problema
ruleProblema 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProblemaAccess().getGroup()); }
		(rule__Problema__Group__0)
		{ after(grammarAccess.getProblemaAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpressao
entryRuleExpressao
:
{ before(grammarAccess.getExpressaoRule()); }
	 ruleExpressao
{ after(grammarAccess.getExpressaoRule()); } 
	 EOF 
;

// Rule Expressao
ruleExpressao 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressaoAccess().getAlternatives()); }
		(rule__Expressao__Alternatives)
		{ after(grammarAccess.getExpressaoAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleArmazena
entryRuleArmazena
:
{ before(grammarAccess.getArmazenaRule()); }
	 ruleArmazena
{ after(grammarAccess.getArmazenaRule()); } 
	 EOF 
;

// Rule Armazena
ruleArmazena 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getArmazenaAccess().getGroup()); }
		(rule__Armazena__Group__0)
		{ after(grammarAccess.getArmazenaAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOperacao
entryRuleOperacao
:
{ before(grammarAccess.getOperacaoRule()); }
	 ruleOperacao
{ after(grammarAccess.getOperacaoRule()); } 
	 EOF 
;

// Rule Operacao
ruleOperacao 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOperacaoAccess().getGroup()); }
		(rule__Operacao__Group__0)
		{ after(grammarAccess.getOperacaoAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule SinalMatematico
ruleSinalMatematico
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSinalMatematicoAccess().getAlternatives()); }
		(rule__SinalMatematico__Alternatives)
		{ after(grammarAccess.getSinalMatematicoAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expressao__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressaoAccess().getArmazenaParserRuleCall_0()); }
		ruleArmazena
		{ after(grammarAccess.getExpressaoAccess().getArmazenaParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getExpressaoAccess().getOperacaoParserRuleCall_1()); }
		ruleOperacao
		{ after(grammarAccess.getExpressaoAccess().getOperacaoParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SinalMatematico__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSinalMatematicoAccess().getSOMAEnumLiteralDeclaration_0()); }
		('+')
		{ after(grammarAccess.getSinalMatematicoAccess().getSOMAEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getSinalMatematicoAccess().getSUBTRACAOEnumLiteralDeclaration_1()); }
		('-')
		{ after(grammarAccess.getSinalMatematicoAccess().getSUBTRACAOEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getSinalMatematicoAccess().getMULTIPLICACAOEnumLiteralDeclaration_2()); }
		('*')
		{ after(grammarAccess.getSinalMatematicoAccess().getMULTIPLICACAOEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getSinalMatematicoAccess().getDIVISAOEnumLiteralDeclaration_3()); }
		('/')
		{ after(grammarAccess.getSinalMatematicoAccess().getDIVISAOEnumLiteralDeclaration_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Problema__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Problema__Group__0__Impl
	rule__Problema__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Problema__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProblemaAccess().getProblemaKeyword_0()); }
	'Problema'
	{ after(grammarAccess.getProblemaAccess().getProblemaKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Problema__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Problema__Group__1__Impl
	rule__Problema__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Problema__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProblemaAccess().getNameAssignment_1()); }
	(rule__Problema__NameAssignment_1)
	{ after(grammarAccess.getProblemaAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Problema__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Problema__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Problema__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProblemaAccess().getExpressoesAssignment_2()); }
	(rule__Problema__ExpressoesAssignment_2)*
	{ after(grammarAccess.getProblemaAccess().getExpressoesAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Armazena__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Armazena__Group__0__Impl
	rule__Armazena__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Armazena__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArmazenaAccess().getArmazeneKeyword_0()); }
	'Armazene'
	{ after(grammarAccess.getArmazenaAccess().getArmazeneKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Armazena__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Armazena__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Armazena__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArmazenaAccess().getTermoAssignment_1()); }
	(rule__Armazena__TermoAssignment_1)
	{ after(grammarAccess.getArmazenaAccess().getTermoAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Operacao__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Operacao__Group__0__Impl
	rule__Operacao__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Operacao__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperacaoAccess().getSinalAssignment_0()); }
	(rule__Operacao__SinalAssignment_0)
	{ after(grammarAccess.getOperacaoAccess().getSinalAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operacao__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Operacao__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Operacao__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperacaoAccess().getTermoAssignment_1()); }
	(rule__Operacao__TermoAssignment_1)
	{ after(grammarAccess.getOperacaoAccess().getTermoAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Problema__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProblemaAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getProblemaAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Problema__ExpressoesAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProblemaAccess().getExpressoesExpressaoParserRuleCall_2_0()); }
		ruleExpressao
		{ after(grammarAccess.getProblemaAccess().getExpressoesExpressaoParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Armazena__TermoAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArmazenaAccess().getTermoINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getArmazenaAccess().getTermoINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operacao__SinalAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperacaoAccess().getSinalSinalMatematicoEnumRuleCall_0_0()); }
		ruleSinalMatematico
		{ after(grammarAccess.getOperacaoAccess().getSinalSinalMatematicoEnumRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operacao__TermoAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperacaoAccess().getTermoINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getOperacaoAccess().getTermoINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
