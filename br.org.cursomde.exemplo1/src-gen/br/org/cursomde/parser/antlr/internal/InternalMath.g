/*
 * generated by Xtext 2.13.0
 */
grammar InternalMath;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package br.org.cursomde.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package br.org.cursomde.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import br.org.cursomde.services.MathGrammarAccess;

}

@parser::members {

 	private MathGrammarAccess grammarAccess;

    public InternalMathParser(TokenStream input, MathGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Problema";
   	}

   	@Override
   	protected MathGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleProblema
entryRuleProblema returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProblemaRule()); }
	iv_ruleProblema=ruleProblema
	{ $current=$iv_ruleProblema.current; }
	EOF;

// Rule Problema
ruleProblema returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Problema'
		{
			newLeafNode(otherlv_0, grammarAccess.getProblemaAccess().getProblemaKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getProblemaAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getProblemaRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getProblemaAccess().getExpressoesExpressaoParserRuleCall_2_0());
				}
				lv_expressoes_2_0=ruleExpressao
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProblemaRule());
					}
					add(
						$current,
						"expressoes",
						lv_expressoes_2_0,
						"br.org.cursomde.Math.Expressao");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleExpressao
entryRuleExpressao returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressaoRule()); }
	iv_ruleExpressao=ruleExpressao
	{ $current=$iv_ruleExpressao.current; }
	EOF;

// Rule Expressao
ruleExpressao returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpressaoAccess().getArmazenaParserRuleCall_0());
		}
		this_Armazena_0=ruleArmazena
		{
			$current = $this_Armazena_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressaoAccess().getOperacaoParserRuleCall_1());
		}
		this_Operacao_1=ruleOperacao
		{
			$current = $this_Operacao_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleArmazena
entryRuleArmazena returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArmazenaRule()); }
	iv_ruleArmazena=ruleArmazena
	{ $current=$iv_ruleArmazena.current; }
	EOF;

// Rule Armazena
ruleArmazena returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Armazene'
		{
			newLeafNode(otherlv_0, grammarAccess.getArmazenaAccess().getArmazeneKeyword_0());
		}
		(
			(
				lv_termo_1_0=RULE_INT
				{
					newLeafNode(lv_termo_1_0, grammarAccess.getArmazenaAccess().getTermoINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getArmazenaRule());
					}
					setWithLastConsumed(
						$current,
						"termo",
						lv_termo_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleOperacao
entryRuleOperacao returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOperacaoRule()); }
	iv_ruleOperacao=ruleOperacao
	{ $current=$iv_ruleOperacao.current; }
	EOF;

// Rule Operacao
ruleOperacao returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getOperacaoAccess().getSinalSinalMatematicoEnumRuleCall_0_0());
				}
				lv_sinal_0_0=ruleSinalMatematico
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOperacaoRule());
					}
					set(
						$current,
						"sinal",
						lv_sinal_0_0,
						"br.org.cursomde.Math.SinalMatematico");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_termo_1_0=RULE_INT
				{
					newLeafNode(lv_termo_1_0, grammarAccess.getOperacaoAccess().getTermoINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOperacaoRule());
					}
					setWithLastConsumed(
						$current,
						"termo",
						lv_termo_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Rule SinalMatematico
ruleSinalMatematico returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='+'
			{
				$current = grammarAccess.getSinalMatematicoAccess().getSOMAEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getSinalMatematicoAccess().getSOMAEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='-'
			{
				$current = grammarAccess.getSinalMatematicoAccess().getSUBTRACAOEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getSinalMatematicoAccess().getSUBTRACAOEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='*'
			{
				$current = grammarAccess.getSinalMatematicoAccess().getMULTIPLICACAOEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getSinalMatematicoAccess().getMULTIPLICACAOEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='/'
			{
				$current = grammarAccess.getSinalMatematicoAccess().getDIVISAOEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getSinalMatematicoAccess().getDIVISAOEnumLiteralDeclaration_3());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
