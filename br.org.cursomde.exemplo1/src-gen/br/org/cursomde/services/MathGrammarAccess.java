/*
 * generated by Xtext 2.13.0
 */
package br.org.cursomde.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MathGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ProblemaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.org.cursomde.Math.Problema");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProblemaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cExpressoesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressoesExpressaoParserRuleCall_2_0 = (RuleCall)cExpressoesAssignment_2.eContents().get(0);
		
		//Problema:
		//	'Problema' name=ID
		//	expressoes+=Expressao*;
		@Override public ParserRule getRule() { return rule; }
		
		//'Problema' name=ID expressoes+=Expressao*
		public Group getGroup() { return cGroup; }
		
		//'Problema'
		public Keyword getProblemaKeyword_0() { return cProblemaKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//expressoes+=Expressao*
		public Assignment getExpressoesAssignment_2() { return cExpressoesAssignment_2; }
		
		//Expressao
		public RuleCall getExpressoesExpressaoParserRuleCall_2_0() { return cExpressoesExpressaoParserRuleCall_2_0; }
	}
	public class ExpressaoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.org.cursomde.Math.Expressao");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cArmazenaParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOperacaoParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Expressao:
		//	Armazena | Operacao;
		@Override public ParserRule getRule() { return rule; }
		
		//Armazena | Operacao
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Armazena
		public RuleCall getArmazenaParserRuleCall_0() { return cArmazenaParserRuleCall_0; }
		
		//Operacao
		public RuleCall getOperacaoParserRuleCall_1() { return cOperacaoParserRuleCall_1; }
	}
	public class ArmazenaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.org.cursomde.Math.Armazena");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cArmazeneKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTermoAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTermoINTTerminalRuleCall_1_0 = (RuleCall)cTermoAssignment_1.eContents().get(0);
		
		//Armazena:
		//	'Armazene' termo=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'Armazene' termo=INT
		public Group getGroup() { return cGroup; }
		
		//'Armazene'
		public Keyword getArmazeneKeyword_0() { return cArmazeneKeyword_0; }
		
		//termo=INT
		public Assignment getTermoAssignment_1() { return cTermoAssignment_1; }
		
		//INT
		public RuleCall getTermoINTTerminalRuleCall_1_0() { return cTermoINTTerminalRuleCall_1_0; }
	}
	public class OperacaoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.org.cursomde.Math.Operacao");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSinalAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSinalSinalMatematicoEnumRuleCall_0_0 = (RuleCall)cSinalAssignment_0.eContents().get(0);
		private final Assignment cTermoAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTermoINTTerminalRuleCall_1_0 = (RuleCall)cTermoAssignment_1.eContents().get(0);
		
		//Operacao:
		//	sinal=SinalMatematico termo=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//sinal=SinalMatematico termo=INT
		public Group getGroup() { return cGroup; }
		
		//sinal=SinalMatematico
		public Assignment getSinalAssignment_0() { return cSinalAssignment_0; }
		
		//SinalMatematico
		public RuleCall getSinalSinalMatematicoEnumRuleCall_0_0() { return cSinalSinalMatematicoEnumRuleCall_0_0; }
		
		//termo=INT
		public Assignment getTermoAssignment_1() { return cTermoAssignment_1; }
		
		//INT
		public RuleCall getTermoINTTerminalRuleCall_1_0() { return cTermoINTTerminalRuleCall_1_0; }
	}
	
	public class SinalMatematicoElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "br.org.cursomde.Math.SinalMatematico");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSOMAEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSOMAPlusSignKeyword_0_0 = (Keyword)cSOMAEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSUBTRACAOEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSUBTRACAOHyphenMinusKeyword_1_0 = (Keyword)cSUBTRACAOEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMULTIPLICACAOEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMULTIPLICACAOAsteriskKeyword_2_0 = (Keyword)cMULTIPLICACAOEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDIVISAOEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDIVISAOSolidusKeyword_3_0 = (Keyword)cDIVISAOEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum SinalMatematico:
		//	SOMA='+' |
		//	SUBTRACAO='-' |
		//	MULTIPLICACAO='*' |
		//	DIVISAO='/';
		public EnumRule getRule() { return rule; }
		
		//SOMA='+' | SUBTRACAO='-' | MULTIPLICACAO='*' | DIVISAO='/'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SOMA='+'
		public EnumLiteralDeclaration getSOMAEnumLiteralDeclaration_0() { return cSOMAEnumLiteralDeclaration_0; }
		
		//'+'
		public Keyword getSOMAPlusSignKeyword_0_0() { return cSOMAPlusSignKeyword_0_0; }
		
		//SUBTRACAO='-'
		public EnumLiteralDeclaration getSUBTRACAOEnumLiteralDeclaration_1() { return cSUBTRACAOEnumLiteralDeclaration_1; }
		
		//'-'
		public Keyword getSUBTRACAOHyphenMinusKeyword_1_0() { return cSUBTRACAOHyphenMinusKeyword_1_0; }
		
		//MULTIPLICACAO='*'
		public EnumLiteralDeclaration getMULTIPLICACAOEnumLiteralDeclaration_2() { return cMULTIPLICACAOEnumLiteralDeclaration_2; }
		
		//'*'
		public Keyword getMULTIPLICACAOAsteriskKeyword_2_0() { return cMULTIPLICACAOAsteriskKeyword_2_0; }
		
		//DIVISAO='/'
		public EnumLiteralDeclaration getDIVISAOEnumLiteralDeclaration_3() { return cDIVISAOEnumLiteralDeclaration_3; }
		
		//'/'
		public Keyword getDIVISAOSolidusKeyword_3_0() { return cDIVISAOSolidusKeyword_3_0; }
	}
	
	private final ProblemaElements pProblema;
	private final ExpressaoElements pExpressao;
	private final ArmazenaElements pArmazena;
	private final OperacaoElements pOperacao;
	private final SinalMatematicoElements eSinalMatematico;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MathGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProblema = new ProblemaElements();
		this.pExpressao = new ExpressaoElements();
		this.pArmazena = new ArmazenaElements();
		this.pOperacao = new OperacaoElements();
		this.eSinalMatematico = new SinalMatematicoElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("br.org.cursomde.Math".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Problema:
	//	'Problema' name=ID
	//	expressoes+=Expressao*;
	public ProblemaElements getProblemaAccess() {
		return pProblema;
	}
	
	public ParserRule getProblemaRule() {
		return getProblemaAccess().getRule();
	}
	
	//Expressao:
	//	Armazena | Operacao;
	public ExpressaoElements getExpressaoAccess() {
		return pExpressao;
	}
	
	public ParserRule getExpressaoRule() {
		return getExpressaoAccess().getRule();
	}
	
	//Armazena:
	//	'Armazene' termo=INT;
	public ArmazenaElements getArmazenaAccess() {
		return pArmazena;
	}
	
	public ParserRule getArmazenaRule() {
		return getArmazenaAccess().getRule();
	}
	
	//Operacao:
	//	sinal=SinalMatematico termo=INT;
	public OperacaoElements getOperacaoAccess() {
		return pOperacao;
	}
	
	public ParserRule getOperacaoRule() {
		return getOperacaoAccess().getRule();
	}
	
	//enum SinalMatematico:
	//	SOMA='+' |
	//	SUBTRACAO='-' |
	//	MULTIPLICACAO='*' |
	//	DIVISAO='/';
	public SinalMatematicoElements getSinalMatematicoAccess() {
		return eSinalMatematico;
	}
	
	public EnumRule getSinalMatematicoRule() {
		return getSinalMatematicoAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
